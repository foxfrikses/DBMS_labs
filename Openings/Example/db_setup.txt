DROP DATABASE IF EXISTS openings_db;
DROP USER IF EXISTS openings_app;
DROP USER IF EXISTS openings_app_admin;

CREATE USER openings_app WITH PASSWORD 'password';
CREATE USER openings_app_admin WITH PASSWORD 'password';
CREATE DATABASE openings_db WITH ENCODING = UTF8;
\c openings_db;

CREATE TABLE openings_user (
  id                SERIAL PRIMARY KEY,
  username          VARCHAR(30) NOT NULL UNIQUE,
  name              VARCHAR(255) NOT NULL,
  registration_date TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  password_hash     BYTEA NOT NULL,
  hash_alg          INTEGER NOT NULL
);

CREATE TABLE openings_user_permission (
  id                SERIAL PRIMARY KEY,
  name              VARCHAR(30) NOT NULL UNIQUE
);
INSERT INTO openings_user_permission (id, name) 
VALUES(1, 'Accept create company request');

CREATE TABLE openings_user_to_user_permission (
  id_user           INTEGER NOT NULL,
  id_permission     INTEGER NOT NULL,
  
  PRIMARY KEY(id_user, id_permission),
  CONSTRAINT fk_user
    FOREIGN KEY(id_user) 
    REFERENCES openings_user(id)
    ON DELETE CASCADE,
  CONSTRAINT fk_permission
    FOREIGN KEY(id_permission) 
    REFERENCES openings_user_permission(id)
    ON DELETE CASCADE
);

CREATE TABLE openings_company (
  id                SERIAL PRIMARY KEY,
  name              VARCHAR(100) NOT NULL UNIQUE,
  id_company_admin  INTEGER NOT NULL,
  
  CONSTRAINT fk_company_admin
    FOREIGN KEY(id_company_admin) 
    REFERENCES openings_user(id)
    ON DELETE SET NULL
);

CREATE TABLE openings_company_permission (
  id                SERIAL PRIMARY KEY,
  name              VARCHAR(30) NOT NULL UNIQUE
);
INSERT INTO openings_company_permission (id, name) 
VALUES(1, 'Work with openings');

CREATE TABLE openings_user_to_company_permission (
  id_user           INTEGER NOT NULL,
  id_permission     INTEGER NOT NULL,
  id_company        INTEGER NOT NULL,
  
  PRIMARY KEY(id_user, id_permission, id_company),
  CONSTRAINT fk_user
    FOREIGN KEY(id_user) 
    REFERENCES openings_user(id)
    ON DELETE CASCADE,
  CONSTRAINT fk_permission
    FOREIGN KEY(id_permission) 
    REFERENCES openings_company_permission(id)
    ON DELETE CASCADE,
  CONSTRAINT fk_company
    FOREIGN KEY(id_company) 
    REFERENCES openings_company(id)
    ON DELETE CASCADE
);

CREATE TABLE openings_create_company_request (
  id                 SERIAL PRIMARY KEY,
  company_name       VARCHAR(100) NOT NULL,
  id_requester       INTEGER NOT NULL,
  request_date       TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  request_status     INTEGER NOT NULL DEFAULT 1,
  status_change_date TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
  id_status_changer  INTEGER NOT NULL,
  
  CONSTRAINT fk_status_changer
    FOREIGN KEY(id_status_changer)
    REFERENCES openings_user(id)
    ON DELETE CASCADE,
  CONSTRAINT fk_requester
    FOREIGN KEY(id_requester)
    REFERENCES openings_user(id)
    ON DELETE CASCADE
);

CREATE TABLE openings_user_resume (
  id                SERIAL PRIMARY KEY,
  filename          VARCHAR(255) NOT NULL,
  blob              BYTEA NOT NULL,
  id_user           INTEGER NOT NULL,

  CONSTRAINT fk_user
    FOREIGN KEY(id_user) 
    REFERENCES openings_user(id)
    ON DELETE CASCADE
);

CREATE TABLE openings_job_opening (
  id                 SERIAL PRIMARY KEY,
  title              VARCHAR(40) NOT NULL,
  description        VARCHAR(255),
  id_company         INTEGER NOT NULL,
  create_date        TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
  id_creator         INTEGER NOT NULL,
  opening_status     INTEGER NOT NULL DEFAULT 1,
  status_change_date TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
  id_status_changer  INTEGER NOT NULL,
  
  CONSTRAINT fk_company
    FOREIGN KEY(id_company) 
    REFERENCES openings_company(id)
    ON DELETE CASCADE,
  CONSTRAINT fk_creator
    FOREIGN KEY(id_creator) 
    REFERENCES openings_user(id)
    ON DELETE SET NULL,
  CONSTRAINT fk_status_changer
    FOREIGN KEY(id_status_changer) 
    REFERENCES openings_user(id)  
    ON DELETE SET NULL
);

CREATE TABLE openings_job_opening_application (
  id                 SERIAL PRIMARY KEY,
  id_resume          INTEGER NOT NULL,
  id_opening         INTEGER NOT NULL,
  application_date   TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
  application_status INTEGER NOT NULL DEFAULT 1,
  status_change_date TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
  id_status_changer  INTEGER NOT NULL,
  
  CONSTRAINT fk_resume
    FOREIGN KEY(id_resume) 
    REFERENCES openings_user_resume(id)
    ON DELETE SET NULL,
  CONSTRAINT fk_opening
    FOREIGN KEY(id_opening) 
    REFERENCES openings_job_opening(id)
    ON DELETE CASCADE,
  CONSTRAINT fk_status_changer
    FOREIGN KEY(id_status_changer) 
    REFERENCES openings_user(id)  
    ON DELETE SET NULL
);

CREATE TABLE openings_admin (
  id_user            INTEGER PRIMARY KEY,

  CONSTRAINT fk_id_user
    FOREIGN KEY(id_user) 
    REFERENCES openings_user(id)  
    ON DELETE CASCADE
);

\c openings_db;

GRANT SELECT on 
openings_admin
to openings_app;

GRANT SELECT, INSERT, UPDATE, DELETE on 
openings_admin
to openings_app_admin;

GRANT SELECT, INSERT, UPDATE, DELETE on 
openings_user,
openings_user_permission,
openings_user_to_user_permission,
openings_company,
openings_company_permission,
openings_user_to_company_permission,
openings_user_resume,
openings_job_opening,
openings_job_opening_application,
openings_create_company_request
to openings_app;

GRANT SELECT, INSERT, UPDATE, DELETE on 
openings_user,
openings_user_permission,
openings_user_to_user_permission,
openings_company,
openings_company_permission,
openings_user_to_company_permission,
openings_user_resume,
openings_job_opening,
openings_job_opening_application,
openings_create_company_request
to openings_app_admin;

GRANT USAGE, SELECT, UPDATE on 
all sequences 
IN SCHEMA public to openings_app;

GRANT USAGE, SELECT, UPDATE on 
all sequences 
IN SCHEMA public to openings_app_admin;

